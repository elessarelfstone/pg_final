scope: rebrain
namespace: /rebrain-cluster/
name: {{ inventory_hostname }}

restapi:
  listen: {{ ansible_host }}:8008
  connect_address: {{ ansible_host }}:8008

etcd:
  hosts: {% for host in groups['etcd'] %}{{ hostvars[host]['ansible_host'] }}:2379{% if not loop.last %},{% endif %}{% endfor %}

bootstrap:
  dcs:
    ttl: 30
    loop_wait: 10
    retry_timeout: 10
    maximum_lag_on_failover: 1048576
    synchronous_mode: true
    postgresql:
      use_pg_rewind: true
      parameters:
      wal_level: replica 
      hot_standby: "on" 
      max_wal_senders: 8 
      max_replication_slots: 10 
      wal_log_hints: "on" 
      archive_mode: "on" 
      archive_timeout: 1800s
      archive_command: "cp -f %p /db/pg_archived/%f"
      recovery_conf:
        restore_command: "cp -f /db/pg_archived/%f %p"
  initdb:
  - encoding: UTF8
  - data-checksums
  - locale: en_US.UTF8

  pg_hba:
  - host replication replicator 0.0.0.0/0 md5
  - host all all 0.0.0.0/0 md5
  users:
    rebrain_admin:
      password: rebrain_admin_password
      options:
      - createrole
      - createdb
postgresql:
  listen: {{ ansible_host }}:5432
  connect_address: {{ ansible_host }}:5432
  data_dir: /etc/patroni/pgdata # эту директорию создаст скрипт, описанный выше и установит нужные права
  bin_dir:  /usr/lib/postgresql/{{ pg_version }}/bin # укажите путь до вашей директории с postgresql
  pgpass: /tmp/pgpass0
  authentication:
    replication:
      username: replicator
      password: replicatorSuperHarDpwd
    superuser:
      username: root
      password: admin
#  create_replica_methods:
#    basebackup:
#      checkpoint: 'fast'
  parameters:
    unix_socket_directories: '/var/run/postgresql'
    external_pid_file: '/var/run/postgresql/{{ pg_version }}-main.pid'
  logging_collector: "on" 
  log_directory: "/var/log/postgresql"
  log_filename: "postgresql-{{ pg_version }}-main.log"

tags:
    nofailover: false
    noloadbalance: false
    clonefrom: false
    nosync: false
